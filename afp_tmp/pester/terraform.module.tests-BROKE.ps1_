Describe "Terraform Module" -Tag "tfModule" {

    BeforeAll {
        # Determine current branch (different approach for pipeline executions vs local executions)
        # Detect Diff - used for changelog detection during module validation
        $pipeline_src_branch = $ENV:BUILD_SOURCEBRANCH
        $main_branch = "refs/heads/main"
        if ($ENV:BUILD_SOURCEBRANCH) {
            $current_branch = $ENV:BUILD_SOURCEBRANCH -replace ("refs/heads", "remotes/origin") -replace ("refs/", "")
            $main_branch = $main_branch -replace ("refs/heads", "remotes/origin")

        } else {
            $current_branch = git branch --show-current
            $main_branch = $main_branch
        }	
        Write-Host "Current Branch: $current_branch"
        Write-Host "Main Branch: $main_branch"
        Write-Host "Diff detected: [$main_branch]..[$current_branch]"
        }


    }
		
    Context "Folder structure" {
        It "Has required file [<_>]" -ForEach @(
            "pipelines/pipeline.yaml"
            "examples/example_usage_default/basic.tf"
            "docs/service_design.md"
            ".terraform-docs.yml"
            ".gitignore"
            "CHANGELOG.md"
            "README.md"
            "version.tf"
        ) {
            $_ | Should -Exist -Because "this file is required to ensure usability of the module"
        }

    }

    Context "Terraform Code" {
        It "does not contain a provider block" {
            (get-content *.tf | Where-Object {$_ -match "^provider"}).Count | Should -BeLessOrEqual 0 -Because "including provider blocks in modules will cause errors when the module is called"
        }
    }

    Context "Unit Tests" {
        It "Has at least one unit test" {
            (Get-ChildItem .\tests\ -Directory -Exclude example).Count | Should -BeGreaterThan 0 -Because "unit testing is the a critical means of module validation, and is essential for maintaining quality modules"
        }

    }

    Context "Pipeline Code" {		
        It "pipelines/pipeline.yaml does not contain known syntax error for unit test toggle" {
            "pipelines/pipeline.yaml" | Should -Not -FileContentMatch "\`${{ eq\(parameters.enableUnitTests, false\) }}:" -Because "this is a syntax error. Update code to: `${{ eq('`${{parameters.enableUnitTests}}', 'false') }}:"
        }
    }

    Context "Documentation" {
        It ".terraform-docs.yml contains [<_>]" -ForEach @(
            "{{ include `"tests/"
            "{{ include `"docs/service_design.md`" }}"
            "{{ include `"CHANGELOG.md`" }}"

        ) {
            ".terraform-docs.yml" | Should -FileContentMatch $_ -Because "this string needs to be in the .terraform-docs.yml to ensure auto generated documentation contains all necessary information"
        }

        # $current_branch = git branch --show-current
        # If ($current_branch -notcontains "main") {
        #     It "CHANGELOG.md must be updated to reflect what changes have been made to the module if changes are detected between branch [<main_branch>]" {
        #         $version_diff = invoke-expression "git diff refs/heads/main:CHANGELOG.md CHANGELOG.md"
        #         $version_diff | Should -Not -BeNullOrEmpty -Because "Changelog must be updated"
        #     }
    
        #     It "version.tf must be modified to reflect updated module version number if changes are detected between branch [<main_branch>]" {
        #         $version_diff = invoke-expression "git diff refs/heads/main:version.tf version.tf"
        #         $version_diff | Should -Not -BeNullOrEmpty -Because "Changelog must be updated"
        #     }
        # }

    Context ".gitignore" {
        It ".gitignore contains [<_>]" -ForEach @(
            "^\*\*/.terraform/\*"
            "^\*\*/.TFTesting/\*"
            "^\*.tfplan"
            "^\*.tfvars"
        ) {
            ".gitignore" | Should -FileContentMatch $_ -Because "this file can contain user specific or sensitive data"
        }

    }

}