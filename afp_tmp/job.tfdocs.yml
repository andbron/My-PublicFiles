parameters:
  targetPath: $(modulePath)
  vmImage: "ubuntu-latest" #"ubuntu-latest"
  poolName_module_development: "" #"$(poolName_module_development)"
  condition: succeeded()
  generateDocs: true
  dependsOn: ""

jobs:
  - job: "Terraform_Docs"
    condition: and(${{ parameters.condition }}, eq(${{ parameters.generateDocs }},'true'))
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      ${{ if not(eq(parameters['poolName_module_development'], '')) }}:
        name: ${{  parameters.poolName_module_development }}
      ${{ if eq(parameters['poolName_module_development'], '') }}:
        vmImage: ${{  parameters.vmImage }}
    workspace:
      clean: all
    steps:
      - checkout: self
        persistCredentials: true
        path: self
      # - checkout: control
      #   path: control
      - checkout: management
        path: management

      - task: PowerShell@2
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/main')))
        enabled: true
        displayName: Docs - generate
        inputs:
          targetType: "inline"
          script: |
            Import-Module $(Pipeline.Workspace)/management/.pipelines/scripts/Pwsh-DevOps.psm1
            Invoke-TfDocs -Verbose
          pwsh: true
          workingDirectory: "$(Pipeline.Workspace)/$(workingDirectory)"

      - task: PowerShell@2
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/main')))
        displayName: Docs - Commit and Push
        inputs:
          targetType: "inline"
          script: |
            Write-Output "Prepare to Commit Docs"

            git config --global user.email "$(Build.RequestedForEmail)"
            git config --global user.name "$(Build.RequestedFor)"
            git config --system core.longpaths true  

            git status

            $branch = ("$(Build.SourceBranch)" -split ("refs/heads/"))[1]
            if ("$(Build.SourceBranch)" -match "refs/pull") {
              $branch = ("$(System.PullRequest.SourceBranch)" -split ("refs/heads/"))[1]
            }

            Write-Output "Track files, commit and push"
            git checkout $branch
            git add *.md
            git status
            git remote -v
            git commit -am "Publishing docs to [$branch] [skip ci]"
            git push -u origin $branch
          pwsh: true
          workingDirectory: "$(Pipeline.Workspace)/$(workingDirectory)"
          # workingDirectory: "$(Pipeline.Workspace)/self${{ parameters.targetPath }}"
