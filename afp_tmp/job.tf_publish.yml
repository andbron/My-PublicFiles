parameters:
  # module_name: $(moduleName)
  module_dir: "$(modulePath)"
  vmImage: "windows-latest"
  poolName_module_development: ""
  versionType: none
  # mainBranchName: "main"

jobs:
  - job: "Terraform_Publish"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), not(eq(variables['Build.Reason'], 'PullRequest')))
    displayName: "Terraform Publish"
    # variables:
    #   - name: advice.detachedHead
    #     value: false
    #   - name: versionType
    #     ${{ if and(not(eq(variables['Build.Reason'], 'manual')), startsWith(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    #       value: "pre"
    #     ${{ if and(eq(variables['Build.Reason'], 'manual'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))) }}:
    #       value: ${{ parameters.versionType }}
    #     ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
    #       value: "none"
    # pool:
    #   vmImage: ${{ parameters.poolName }}
    pool:
      ${{ if not(eq(parameters['poolName_module_development'], '')) }}:
        name: ${{  parameters.poolName_module_development }}
      ${{ if eq(parameters['poolName_module_development'], '') }}:
        vmImage: ${{  parameters.vmImage }}
    workspace:
      clean: all
    steps:
      - checkout: self
        persistCredentials: true

      - task: CmdLine@2
        displayName: Initialise Git
        inputs:
          script: |
            git config --global user.email "$(Build.RequestedForEmail)"
            git config --global user.name "$(Build.RequestedFor)"
            git config --system core.longpaths true
          workingDirectory: "${{ parameters.module_dir }}"

      - task: PowerShell@2
        # condition: and(succeeded(), not(eq('${{ variables.versionType }}', 'none')))
        displayName: versioning
        inputs:
          targetType: "inline"
          script: |
            # # Set-Location "$(folderTargetRepo)"
            # [array]$tags = git tag --sort=v:refname
            # $tags = $tags | Where-Object {$_ -match "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"} #only match semver tgs

            # if ($tags.count -le 0) {
            #   $latest = [System.Management.Automation.SemanticVersion]::New(0,0,0)
            # } else {
            #   $latest = [version]$tags[-1]
            # }
                      

            # Write-Output "the current latest version is [$($latest.tostring())]"

            # $major = $latest.major
            # $minor = $latest.minor
            # $patch = $latest.build

            # switch ("${{ variables.versionType }}")
            # {
            #   major {
            #     $major = $major + 1
            #     $minor = 0
            #     $patch = 0
            #   }
            #   minor {
            #     $minor = $minor + 1
            #     $patch = 0
            #   }
            #   patch {
            #     $patch = $patch + 1
            #   }
            # }

            # $newversion = [System.Management.Automation.SemanticVersion]::New($major,$minor,$patch)

            # if ("${{ variables.versionType }}" -eq "dev") {
            #   $newTag = "dev"
            # } elseif ("${{ variables.versionType }}" -eq "pre") {
            #   $newTag = "pre"
            # } else {
            #   $newTag = "$($newversion.tostring())"
            # }
            # Write-Output "the new version is [$newTag]"
            # Write-Host "##vso[task.setvariable variable=newVersion]$newTag"


            write-host "Git Config File: $env:GIT_CONFIG_GLOBAL"
            git config --global user.name "ESLZ Platform"
            git config --global user.email "platform@email.com"
            git config --global credential.helper "!f() { sleep 1; echo `"username=$($ENV:SYSTEM_ACCESSTOKEN)`"; echo `"password=$($ENV:SYSTEM_ACCESSTOKEN)`"; }; f"
            # git config --global http.proxy <enter_proxy_url_here>

            $Last_Commit_Msg = git show -s --format=%s
            # $latest_version = grep version version.tf | grep -Eo '[0-9]{1,4}' | paste -sd'.' -

            $latest_version = ((((select-string -pattern "version" -path ".\version.tf" | select Line).Line).Replace('version = ','')).Replace('"','')).Replace(' ','')


            $current_tag = @(git tag -l)
            $current_version = $current_tag[-1]
            # $current_version = git describe --tags --abbrev=0
            Write-Output "INFO: Latest_version: $latest_version || Current_version: $current_version"
            if ($null -ne $current_version) {
              if ($current_version -gt $latest_version) {
                Write-Output "INFO: Current tag $($current_version) is greater than latest tag $($latest_version)"
              }
              if ($latest_version -gt $current_version) {
                Write-Output "INFO: $($current_version) is lesser than $($latest_version)"
                  git tag -a $latest_version -m "$($Last_Commit_Msg)"

                  # git push https://$ENV:SYSTEM_ACCESSTOKEN@dev.azure.com/<enter_ado_org_name_here>/<enter_tf_module_project_name_here>/_git/${{ parameters.reponame }} $latest_version HEAD:main
                  
                  git push https://$ENV:SYSTEM_ACCESSTOKEN@dev.azure.com/ecpIncubate/EL23-Modules/_git/$(moduleName) $latest_version HEAD:main
                  Write-Output "INFO: Latest tag $($latest_version) is updated."
              }

            } elseif ($current_version -eq $latest_version) {
              Write-Output "INFO: $($current_version) and $($latest_version) are matching"
              Exit 1
            } else {
              Write-Output "INFO: Latest_version: $($latest_version)"
              Write-Output "INFO: No Tag found for repository, Adding initial tag $($latest_version)"
              git tag -a $latest_version -m "$($Last_Commit_Msg)"
              
              # git push https://$ENV:SYSTEM_ACCESSTOKEN@dev.azure.com/<enter_ado_org_name_here>/<enter_tf_module_project_name_here>/_git/${{ parameters.reponame }} $latest_version HEAD:main

              git push https://$ENV:SYSTEM_ACCESSTOKEN@dev.azure.com/ecpIncubate/EL23-Modules/_git/$(moduleName) $latest_version HEAD:main
              
              echo "Added tag $latest_version as initial tag"
            }

          pwsh: true
          workingDirectory: "${{ parameters.module_dir }}"
        env:
          GIT_CONFIG_GLOBAL: "$(Agent.HomeDirectory)/gitconfig"
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # TF_BUILD: true
          # HTTP_PROXY: $(proxy)
          # HTTPS_PROXY: $(proxy)
          # NO_PROXY: $(no_proxy)

      # - task: PowerShell@2
      #   condition: and(succeeded(), not(eq('${{ variables.versionType }}', 'none')))
      #   displayName: PublishandIncrementVersion
      #   inputs:
      #     targetType: "inline"
      #     script: |
      #       $branch = ("$(Build.SourceBranch)" -split ("refs/heads/"))[1]

      #       Write-Output "Track files, commit and push"
      #       git checkout $branch
      #       git status
      #       git remote -v

      #       Write-Output "Add version tag and push"
      #       git tag $(newVersion) --force
      #       git push -u origin $branch --tags --force

      #     pwsh: true
      #     workingDirectory: "${{ parameters.module_dir }}"
